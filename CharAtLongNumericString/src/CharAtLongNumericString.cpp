#include <cstdlib>
#include <cstdio>
#include "charatlongstring.h"

/*
 *  
 * 

For the string S generated by the pattern
1234567891011121314151617181920
find the digit at the x location.




S is generated by appending the string representation of all integers from 1 to D where D is the last integer value. The length of S is determined by the number of integers counted and the number of characters used to represent each integer in string form. Highest power of 10 in the integer determines the number of characters required to express the value.

With x, find the n 'power of 10' range where the x character falls,  i.e. 
  10^n < x < 10^(n+1) 

One approach would be to incrementally subtract from x the number of characters used to express each power-of-10 range
Notes:
1-9                 =   9     values * 1 digit  = 9     characters
10-99               =   90    values * 2 digits = 180   characters
100-999             =   900   values * 3 digits = 2700  characters
1000-9999           =   9000  values * 4 digits = 36000 characters
...                 =   9 * 10^n * n = z

pseudo-code
workingval = x
pow10range = 1
pow10RangeLength = 0
do {
  pow10RangeLength = 9 * 10^pow10range * n
  workingval =- pow10RangeLength
  pow10range++
} while (workingval > 0)

workingval += pow10RangeLength
pow10range--


Determine which integer exists in the range at x-10^n into the current range, i.e.
  i = (x - 10^n) / n + 10^n
Then the character number in that integer, i.e.
  c = (x - 10^n) % n

Finally return the 'c' character in the string representation of the 'i' integer, i.e.
  character = itoa(i)[c];

  *
  */


template <typename T> 
char calcCharAt(T offset) {
  T charCounter = offset;
  T pow10 = 1;
  T n = 1;
  T pow10RangeLength = 0;

  // find which power-of-ten range where the offset falls
  do {
    pow10RangeLength = 9 * pow10 * n;
    charCounter -= pow10RangeLength;
    pow10 *= 10;
    n++;
  } while (charCounter > 0);

  // above loop terminates at one-past, so rollback values
  charCounter += pow10RangeLength;
  pow10 /= 10;
  n--;
  std::printf(" debug: n = %lld", n);
  std::printf(" debug: pow10 = %lld", pow10);
  std::printf(" debug: charCounter = %lld", charCounter);

  // at this point we know 'offset' falls between 10^n and 10^(n+1)
  // and that each integer is 'n' characters long in this range
  // so subtractin all previous power-of-ten ranges from 'offset'
  // leaves us with the number of characters into the 10^n through 10^(n+1)
  // range the requeste offset falls
  /* charCounter should already contain this value */

  // divide this by n and add 10^n to get the integer the offset falls
  // upon.
  T targetValue = charCounter / n + pow10;
  std::printf(" debug: targetValue = %lld", targetValue);

  // modulus this value by n to get the offset within the integer value
  // the character falls
  T valueOffset = charCounter % n;
  
  std::printf(" debug: valueOffset = %lld", valueOffset);

  char *integerString = (char*)std::malloc(n+1);
  std::sprintf (integerString, "%lld", targetValue);
  
  std::printf(" debug: integerString = %s", integerString);
  
  char targetCharacter = integerString[valueOffset];
  std::free(integerString);
  return targetCharacter;

}

template char calcCharAt<int64_t>(int64_t);
